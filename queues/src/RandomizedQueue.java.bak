import java.util.Iterator;
import java.util.NoSuchElementException;

import edu.princeton.cs.algs4.StdRandom;

public class RandomizedQueue<Item> implements Iterable<Item> {
  private int size;
  private Node current;

  private class Node {
    Item item;
    Node next;
    Node last;
  }

  private class RandomizedQueueIterator implements Iterator<Item> {
    private Item[] list;
    private int index;

    public RandomizedQueueIterator() {
      list = (Item[]) new Object[size];
      Node node = current;
      if (size > 0) {
        list[0] = node.item;
        node = node.next;

        for (int i = 1; i < size; i++) {
          int r = StdRandom.uniform(i + 1);
          if (r < i) {
            list[i] = list[r];
          }
          list[r] = node.item;
          node = node.next;
        }
      }
      index = 0;
    }

    public boolean hasNext() {
      return index < list.length;
    }

    public Item next() {
      if (!hasNext()) {
        throw new NoSuchElementException();
      }

      Item i = list[index];
      index++;
      return i;
    }

    public void remove() {
      throw new UnsupportedOperationException();
    }
  }

  // construct an empty randomized queue
  public RandomizedQueue() {
    current = null;
    size = 0;
  }

  // is the randomized queue empty?
  public boolean isEmpty() {
    return size <= 0;
  }

  // return the number of items on the randomized queue
  public int size() {
    return size;
  }

  // add the item
  public void enqueue(Item item) {
    if (item == null)
      throw new IllegalArgumentException();
    size++;
    Node n = new Node();
    n.item = item;
    if (current == null) {
      n.next = n;
      n.last = n;
    } else {
      Node last = current;
      n.next = last.next;
      last.next.last = n;
      last.next = n;
      n.last = last;
    }
    current = n;
  }

  // remove and return a random item
  public Item dequeue() {
    if (isEmpty()) {
      throw new NoSuchElementException();
    }
    size--;
    if (size == 0) {
      Item item = current.item;
      current = null;
      return item;
    }

    Node node = current;
    int r = StdRandom.uniform(size + 1);
    while (r > 0) {
      r--;
      node = node.next;
    }
    node.next.last = node.last;
    node.last.next = node.next;
    current = node.next;
    return node.item;
  }

  // return a random item (but do not remove it)
  public Item sample() {
    if (isEmpty()) {
      throw new NoSuchElementException();
    }
    if (size == 1) {
      return current.item;
    }
    int r = StdRandom.uniform(size);
    Node node = current;
    while (r > 0) {
      r--;
      node = node.next;
    }
    return node.item;
  }

  // return an independent iterator over items in random order
  public Iterator<Item> iterator() {
    return new RandomizedQueueIterator();
  }

  // unit testing (required)
  public static void main(String[] args) {
    RandomizedQueue<Integer> queue = new RandomizedQueue<Integer>();
    queue.enqueue(1);
    queue.enqueue(2);
    assert (queue.size() == 2);
    queue.dequeue();
    assert queue.size() == 1;

    RandomizedQueue<Integer> qu = new RandomizedQueue<Integer>();

    int[] lst = new int[50];
    for (int i = 0; i < 50; i++) {
      if (qu.isEmpty()) {
        qu.enqueue(i);
      } else {
        int r = StdRandom.uniform(2);
        if (r == 0) {
          qu.enqueue(i);
        } else {
          int x = qu.dequeue();
          assert lst[x] == 0;
          lst[x] = 1;
        }
      }
    }

    RandomizedQueue<Integer> qIter = new RandomizedQueue<Integer>();
    int[] lstIter = new int[50];
    for (int i = 0; i < 50; i++) {
      qIter.enqueue(i);
    }
    for (int x : qIter) {
      assert 0 <= x;
      assert x < 50;
      assert lstIter[x] == 0;
      lstIter[x] = 1;
    }

    // assert qu.size() == 50;
    // for (int i = 0; i < 50; i++) {
    // }
  }
}